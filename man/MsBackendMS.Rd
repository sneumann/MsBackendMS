% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendMS.R
\name{MsBackendMS}
\alias{MsBackendMS}
\alias{MsBackendMS-class}
\alias{backendInitialize,MsBackendMS-method}
\alias{spectraVariableMapping,MsBackendMS-method}
\alias{export,MsBackendMS-method}
\title{MS data backend for ms files}
\usage{
\S4method{backendInitialize}{MsBackendMS}(
  object,
  file,
  mapping = spectraVariableMapping(object),
  ...,
  BPPARAM = bpparam()
)

MsBackendMS()

\S4method{spectraVariableMapping}{MsBackendMS}(object, format = c("ms"))

\S4method{export}{MsBackendMS}(
  object,
  x,
  file = tempfile(),
  mapping = spectraVariableMapping(MsBackendMS()),
  allVariables = TRUE,
  exportName = TRUE,
  ...
)
}
\arguments{
\item{object}{Instance of \code{MsBackendMS} class.}

\item{file}{\code{character} with the (full) file name(s) of the ms file(s)
from which MS/MS data should be imported or exported.}

\item{mapping}{named \code{character} vector to rename MS fields to spectra
variables (see \code{\link[=spectraVariableMapping]{spectraVariableMapping()}}). This allows to correctly
import also custom fields or data from files with different MS
\emph{flavors}.}

\item{...}{Currently ignored.}

\item{BPPARAM}{Parameter object defining the parallel processing
setup to import data in parallel. Defaults to \code{BPPARAM = bpparam()}. See \code{\link[=bpparam]{bpparam()}} for more information.}

\item{format}{For \code{spectraVariableMapping}: \code{character(1)} specifying for
which MS \emph{flavour} the mapping should be returned. Currently supported
are: \code{format = "ms"} (generic MS format)}

\item{x}{For \code{export}: a \code{\link[=Spectra]{Spectra()}} object that should be exported to the
specified MS file.}

\item{allVariables}{\code{logical(1)} whether all spectra variables in \code{x}
should be exported or only those defined with \code{mapping}.}

\item{exportName}{\code{logical(1)} whether a \code{NAME} field should always be
exported even if not provided in \code{x}.}
}
\value{
\code{MsBackendMS} and \code{backendInitialize} return an instance of a
\code{MsBackendMS} class. \code{spectraVariableMapping} a named \code{character}
vector with the mapping between spectra variables and MS data fields.
}
\description{
The \code{MsBackendMS} class supports import of MS1/MS2 spectra data from
files in SIRIUS MS file format. \code{MsBackendMS} extends the
\code{\link[=MsBackendDataFrame]{MsBackendDataFrame()}} backend directly and supports thus the
\code{\link[=applyProcessing]{applyProcessing()}} function to make data manipulations persistent.

New objects are created with the \code{MsBackendMS} function. The
\code{backendInitialize} method has to be subsequently called to
initialize the object and import MS data from (one or more) ms
files.

The \code{MsBackendMS} backend provides an \code{export} method that allows to export
the data from the \code{Spectra} object (parameter \code{x}) to a file in ms format.
Parameters to this function are:
\itemize{
\item \code{x}: the \code{Spectra} object that should be exported.
\item \code{file}: \code{character(1)} with the desired file name.
\item \code{mapping}: named \code{character} providing the mapping between spectra
variables and MS data fields. Defaults to
\code{mapping = spectraVariableMapping(MsBackendMS())}.
\item \code{allVariables}: \code{logical(1)} whether all spectra variables in \code{x} should be
exported or only those defined with \code{mapping}.
\item \code{exportName}: \code{logical(1)} whether a \code{NAME} field should always be exported
even if not provided in \code{x}.
}

See the package vignette for details and examples.

The \code{spectraVariableMapping} function allows to provide the mapping between
spectra variable names (i.e. the names that will be used for the spectra
variables in the \code{\link[=Spectra]{Spectra()}} object) and the data field names of the
MS file. Parameter \code{format} allows to select pre-defined mappings. Currently
supported mapping flavors are:
\itemize{
\item \code{format = "ms"}: default MS field names. Should work with SIRIUS 4.4.0
files
}
}
\examples{

## Import spectra from a MS file 
f <- system.file("extdata", "example-sirius-440.ms",
    package = "MsBackendMS")
be <- backendInitialize(MsBackendMS(), f)
be

be$msLevel
be$intensity
be$mz

## precursor m/z are however all missing
be$precursorMz

## Default spectra variable mapping
spectraVariableMapping(MsBackendMS())


## Exporting Spectra objects in MS format.

sps <- Spectra(be)
export(MsBackendMS(), sps, file = stdout())
}
\author{
Steffen Neumann, Michael Witting, Laurent Gatto and Johannes Rainer
}
